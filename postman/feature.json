{
	"info": {
		"_postman_id": "bc0cdc39-6a3e-402a-baac-af4da590a335",
		"name": "Дополнительная функциональность",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26764226"
	},
	"item": [
		{
			"name": "Добавление нового пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"Jayme_Goldner@gmail.com\",\r\n    \"name\": \"Dr. Betty Jerde\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/users"
			},
			"response": []
		},
		{
			"name": "Поиск пользователей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('name');\r",
							"    pm.expect(target[0]).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Идентификатор пользователя должен быть равен 1\", function () {\r",
							"    pm.expect(target[0].id).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/users?ids=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					],
					"query": [
						{
							"key": "ids",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление новой категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"e-business\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/categories"
			},
			"response": []
		},
		{
			"name": "Получение информации о категории по её идентификатору",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).equal(1, 'Идентификатор категории должен соответствовать идентификатору в запросе');\r",
							"    pm.expect(target.name).equal(\"e-business\", 'Название категории должно соответствовать названию категории с указанным идентификатором');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/categories/:catId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						":catId"
					],
					"variable": [
						{
							"key": "catId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
							"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Amet est assumenda similique qui. Repellendus corporis modi et sed pariatur repudiandae perspiciatis corrupti et. Ad id deleniti illo dolorem. Consequatur inventore rerum et qui facere et eligendi et.\",\r\n    \"category\": 1,\r\n    \"description\": \"Odio consequatur nemo soluta. Sed ut odit labore eum et sequi eaque maiores. Voluptates quos itaque eaque asperiores non consequatur. Doloribus quia similique. Eum eligendi in dolor dolorem cum.\\n \\rIpsam dolor eos natus. Quia eligendi quasi laborum amet molestias. Vel enim excepturi ab et dolore iusto doloribus fugiat deserunt. Quis optio officiis aspernatur eos et quia earum. Quibusdam accusantium tenetur porro velit perspiciatis sit qui.\\n \\rNisi laboriosam nihil temporibus. Nulla quod possimus nihil est. Non et et consectetur porro explicabo unde.\",\r\n    \"eventDate\": \"2023-09-23 23:00:18\",\r\n    \"location\": {\r\n        \"lat\": 13.5058,\r\n        \"lon\": 96.7891\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 961,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Nesciunt sapiente sit exercitationem deserunt nostrum omnis nobis.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение полной информации о событии добавленном текущим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(target.state).equal(\"PENDING\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск событий, ожидающих модерации",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).equal(1, 'Идентификатор категории должен соответствовать идентификатору в запросе');\r",
							"    pm.expect(target.state).equal(\"PENDING\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events?states=PENDING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events"
					],
					"query": [
						{
							"key": "states",
							"value": "PENDING"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование данных события и его статуса (отклонение)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('adminComments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.state).equal(\"CANCELED\", 'Статус события должен быть CANCELED');\r",
							"    pm.expect(target.adminComments.length).eql(1);\r",
							"    pm.expect(target.adminComments[0].comment).equal(\"Событие отклонено по причине №1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Amet est assumenda similique qui. Repellendus corporis modi et sed pariatur repudiandae perspiciatis corrupti et. Ad id deleniti illo dolorem. Consequatur inventore rerum et qui facere et eligendi et.\",\r\n    \"category\": 1,\r\n    \"description\": \"Odio consequatur nemo soluta. Sed ut odit labore eum et sequi eaque maiores. Voluptates quos itaque eaque asperiores non consequatur. Doloribus quia similique. Eum eligendi in dolor dolorem cum.\\n \\rIpsam dolor eos natus. Quia eligendi quasi laborum amet molestias. Vel enim excepturi ab et dolore iusto doloribus fugiat deserunt. Quis optio officiis aspernatur eos et quia earum. Quibusdam accusantium tenetur porro velit perspiciatis sit qui.\\n \\rNisi laboriosam nihil temporibus. Nulla quod possimus nihil est. Non et et consectetur porro explicabo unde.\",\r\n    \"eventDate\": \"2023-09-23 23:00:18\",\r\n    \"location\": {\r\n        \"lat\": 13.5058,\r\n        \"lon\": 96.7891\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 961,\r\n    \"requestModeration\": false,\r\n    \"stateAction\": \"REJECT_EVENT\",\r\n    \"title\": \"Nesciunt sapiente sit exercitationem deserunt nostrum omnis nobis.\",\r\n    \"comment\": \"Событие отклонено по причине №1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение полной информации о событии добавленном текущим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('adminComments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(target.state).equal(\"CANCELED\");\r",
							"    pm.expect(target.adminComments.length).eql(1);\r",
							"    pm.expect(target.adminComments[0].comment).equal(\"Событие отклонено по причине №1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение события добавленного текущим пользователем (направить повторно на модерацию)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('adminComments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(target.state).equal(\"PENDING\");\r",
							"    pm.expect(target.adminComments.length).eql(1);\r",
							"    pm.expect(target.adminComments[0].comment).equal(\"Событие отклонено по причине №1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Amet est assumenda similique qui. Repellendus corporis modi et sed pariatur repudiandae perspiciatis corrupti et. Ad id deleniti illo dolorem. Consequatur inventore rerum et qui facere et eligendi et.\",\r\n    \"category\": 1,\r\n    \"description\": \"Odio consequatur nemo soluta. Sed ut odit labore eum et sequi eaque maiores. Voluptates quos itaque eaque asperiores non consequatur. Doloribus quia similique. Eum eligendi in dolor dolorem cum.\\n \\rIpsam dolor eos natus. Quia eligendi quasi laborum amet molestias. Vel enim excepturi ab et dolore iusto doloribus fugiat deserunt. Quis optio officiis aspernatur eos et quia earum. Quibusdam accusantium tenetur porro velit perspiciatis sit qui.\\n \\rNisi laboriosam nihil temporibus. Nulla quod possimus nihil est. Non et et consectetur porro explicabo unde.\",\r\n    \"eventDate\": \"2023-09-23 23:00:18\",\r\n    \"location\": {\r\n        \"lat\": 13.5058,\r\n        \"lon\": 96.7891\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 961,\r\n    \"requestModeration\": false,\r\n    \"stateAction\": \"SEND_TO_REVIEW\",\r\n    \"title\": \"Nesciunt sapiente sit exercitationem deserunt nostrum omnis nobis.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение полной информации о событии добавленном текущим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('adminComments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(target.state).equal(\"PENDING\");\r",
							"    pm.expect(target.adminComments.length).eql(1);\r",
							"    pm.expect(target.adminComments[0].comment).equal(\"Событие отклонено по причине №1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование данных события и его статуса (отклонение)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('adminComments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.state).equal(\"CANCELED\", 'Статус события должен быть CANCELED');\r",
							"    pm.expect(target.adminComments.length).eql(2);\r",
							"    pm.expect(target.adminComments[1].comment).equal(\"Событие отклонено по причине №2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Amet est assumenda similique qui. Repellendus corporis modi et sed pariatur repudiandae perspiciatis corrupti et. Ad id deleniti illo dolorem. Consequatur inventore rerum et qui facere et eligendi et.\",\r\n    \"category\": 1,\r\n    \"description\": \"Odio consequatur nemo soluta. Sed ut odit labore eum et sequi eaque maiores. Voluptates quos itaque eaque asperiores non consequatur. Doloribus quia similique. Eum eligendi in dolor dolorem cum.\\n \\rIpsam dolor eos natus. Quia eligendi quasi laborum amet molestias. Vel enim excepturi ab et dolore iusto doloribus fugiat deserunt. Quis optio officiis aspernatur eos et quia earum. Quibusdam accusantium tenetur porro velit perspiciatis sit qui.\\n \\rNisi laboriosam nihil temporibus. Nulla quod possimus nihil est. Non et et consectetur porro explicabo unde.\",\r\n    \"eventDate\": \"2023-09-23 23:00:18\",\r\n    \"location\": {\r\n        \"lat\": 13.5058,\r\n        \"lon\": 96.7891\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 961,\r\n    \"requestModeration\": false,\r\n    \"stateAction\": \"REJECT_EVENT\",\r\n    \"title\": \"Nesciunt sapiente sit exercitationem deserunt nostrum omnis nobis.\",\r\n    \"comment\": \"Событие отклонено по причине №2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение события добавленного текущим пользователем (направить повторно на модерацию)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('adminComments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(target.state).equal(\"PENDING\");\r",
							"    pm.expect(target.adminComments.length).eql(2);\r",
							"    pm.expect(target.adminComments[1].comment).equal(\"Событие отклонено по причине №2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Amet est assumenda similique qui. Repellendus corporis modi et sed pariatur repudiandae perspiciatis corrupti et. Ad id deleniti illo dolorem. Consequatur inventore rerum et qui facere et eligendi et.\",\r\n    \"category\": 1,\r\n    \"description\": \"Odio consequatur nemo soluta. Sed ut odit labore eum et sequi eaque maiores. Voluptates quos itaque eaque asperiores non consequatur. Doloribus quia similique. Eum eligendi in dolor dolorem cum.\\n \\rIpsam dolor eos natus. Quia eligendi quasi laborum amet molestias. Vel enim excepturi ab et dolore iusto doloribus fugiat deserunt. Quis optio officiis aspernatur eos et quia earum. Quibusdam accusantium tenetur porro velit perspiciatis sit qui.\\n \\rNisi laboriosam nihil temporibus. Nulla quod possimus nihil est. Non et et consectetur porro explicabo unde.\",\r\n    \"eventDate\": \"2023-09-23 23:00:18\",\r\n    \"location\": {\r\n        \"lat\": 13.5058,\r\n        \"lon\": 96.7891\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 961,\r\n    \"requestModeration\": false,\r\n    \"stateAction\": \"SEND_TO_REVIEW\",\r\n    \"title\": \"Nesciunt sapiente sit exercitationem deserunt nostrum omnis nobis.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование данных события и его статуса (публикация)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.state).equal(\"PUBLISHED\", 'Статус события должен быть PUBLISHED');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Amet est assumenda similique qui. Repellendus corporis modi et sed pariatur repudiandae perspiciatis corrupti et. Ad id deleniti illo dolorem. Consequatur inventore rerum et qui facere et eligendi et.\",\r\n    \"category\": 1,\r\n    \"description\": \"Odio consequatur nemo soluta. Sed ut odit labore eum et sequi eaque maiores. Voluptates quos itaque eaque asperiores non consequatur. Doloribus quia similique. Eum eligendi in dolor dolorem cum.\\n \\rIpsam dolor eos natus. Quia eligendi quasi laborum amet molestias. Vel enim excepturi ab et dolore iusto doloribus fugiat deserunt. Quis optio officiis aspernatur eos et quia earum. Quibusdam accusantium tenetur porro velit perspiciatis sit qui.\\n \\rNisi laboriosam nihil temporibus. Nulla quod possimus nihil est. Non et et consectetur porro explicabo unde.\",\r\n    \"eventDate\": \"2023-09-23 23:00:18\",\r\n    \"location\": {\r\n        \"lat\": 13.5058,\r\n        \"lon\": 96.7891\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 961,\r\n    \"requestModeration\": false,\r\n    \"stateAction\": \"PUBLISH_EVENT\",\r\n    \"title\": \"Nesciunt sapiente sit exercitationem deserunt nostrum omnis nobis.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}